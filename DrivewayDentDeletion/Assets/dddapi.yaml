$integration: http://ibm.com/appconnect/integration/v2/integrationFile
integration:
  type: api
  trigger-interfaces:
    trigger-interface-1:
      triggers:
        createRepairquote:
          assembly:
            $ref: '#/integration/assemblies/assembly-1'
          input-context:
            data: createRepairquote
          output-context:
            data: createRepairquote
      options:
        resources:
          - business-object: repairquote
            triggers:
              create: createRepairquote
            model:
              $ref: '#/models/repairquote'
      type: api-trigger
  action-interfaces:
    action-interface-1:
      type: api-action
      business-object: message
      connector-type: mq
      account-name: dddacme
      actions:
        PUTMESSAGE: {}
    action-interface-2:
      type: api-action
      business-object: message
      connector-type: mq
      account-name: dddacme
      actions:
        GETMESSAGE: {}
  assemblies:
    assembly-1:
      assembly:
        execute:
          - set-variable:
              map:
                $map: http://ibm.com/appconnect/map/v1
                customSchemas:
                  properties.`variable`:
                    type: object
                    properties:
                      providerlist:
                        type: array
                        items:
                          type: string
                input:
                  - variable: flowDetails
                    $ref: '#/flowDetails'
                  - variable: Request
                    $ref: '#/trigger/payload'
                mappings:
                  - variable:
                      mappings:
                        - providerlist:
                            expression: '[''acme'',''chris'',''bernie'']'
              name: Set variable
          - for-each:
              map:
                $map: http://ibm.com/appconnect/map/v1
                customSchemas:
                  properties.`output`:
                    type: object
                    properties:
                      quoteProvider:
                        type: string
                      quoteDate:
                        type: string
                        format: date-time
                      quoteCost:
                        type: number
                      quoteComment:
                        type: string
                input:
                  - variable: Setvariable
                    $ref: '#/node-output/Set variable/response/payload'
                  - variable: Setvariable2
                    $ref: '#/block/For each/node-output/Set variable 2/response/payload'
                  - variable: IBMMQPutmessageonaqueue
                    $ref: '#/block/For each/node-output/IBM MQ Put message on a queue/response/payload'
                  - variable: IBMMQGetmessagefromaqueue
                    $ref: '#/block/For each/node-output/IBM MQ Get message from a queue/response/payload'
                  - variable: JSONParserParse
                    $ref: '#/block/For each/node-output/JSON Parser Parse/response/payload'
                  - variable: Foreachitem
                    $ref: '#/block/For each/current-item'
                  - variable: flowDetails
                    $ref: '#/flowDetails'
                mappings:
                  - output:
                      mappings:
                        - quoteComment:
                            template: '{{$JSONParserParse.comment}}'
                        - quoteCost:
                            expression: '$JSONParserParse.quoteamount '
                        - quoteDate:
                            template: '{{$JSONParserParse.quotedate}}'
                        - quoteProvider:
                            template: '{{$Foreachitem}}'
              source:
                expression: '$Setvariable.variable.providerlist '
                input:
                  - variable: Setvariable
                    $ref: '#/node-output/Set variable/response/payload'
                  - variable: flowDetails
                    $ref: '#/flowDetails'
                  - variable: Request
                    $ref: '#/trigger/payload'
              mode: parallel
              continue-on-error: true
              name: For each
              assembly:
                $ref: '#/integration/assemblies/assembly-2'
              display-name: Quote Provider
          - response:
              name: response
              reply-maps:
                - title: repairquote successfully created
                  status-code: 201
                  map:
                    mappings:
                      - descriptionofdamage:
                          template: '{{$Request.descriptionofdamage}}'
                      - email:
                          template: '{{$Request.email}}'
                      - licenseplate:
                          template: '{{$Request.licenseplate}}'
                      - quoteid:
                          template: '{{$Request.quoteid}}'
                      - quotes:
                          foreach:
                            input: '$Foreach '
                            iterator: quotesItem
                            mappings:
                              - comment:
                                  template: '{{$quotesItem.output.quoteComment}}'
                              - quotecost:
                                  expression: '$quotesItem.output.quoteCost '
                              - quotedate:
                                  template: '{{$quotesItem.output.quoteDate}}'
                              - quoteprovider:
                                  template: '{{$quotesItem.output.quoteProvider}}'
                    $map: http://ibm.com/appconnect/map/v1
                    input:
                      - variable: Setvariable
                        $ref: '#/node-output/Set variable/response/payload'
                      - variable: Foreach
                        $ref: '#/node-output/For each/response/payload'
                      - variable: flowDetails
                        $ref: '#/flowDetails'
                      - variable: Request
                        $ref: '#/trigger/payload'
    assembly-2:
      assembly:
        execute:
          - set-variable:
              map:
                $map: http://ibm.com/appconnect/map/v1
                customSchemas:
                  properties.`variable`:
                    type: object
                    properties:
                      quoteid:
                        type: string
                      licenseplate:
                        type: string
                      descriptionofdamage:
                        type: string
                input:
                  - variable: Setvariable
                    $ref: '#/node-output/Set variable/response/payload'
                  - variable: Foreachitem
                    $ref: '#/block/For each/current-item'
                  - variable: flowDetails
                    $ref: '#/flowDetails'
                  - variable: Request
                    $ref: '#/trigger/payload'
                mappings:
                  - variable:
                      mappings:
                        - descriptionofdamage:
                            template: '{{$Request.descriptionofdamage}}'
                        - licenseplate:
                            template: '{{$Request.licenseplate}}'
                        - quoteid:
                            template: '{{$Request.quoteid}}'
              name: Set variable 2
          - custom-action:
              action: PUTMESSAGE
              name: IBM MQ Put message on a queue
              target:
                $ref: '#/integration/action-interfaces/action-interface-1'
              map:
                customSchemas:
                  properties.`mqmdHeader`:
                    type: object
                    properties:
                      CorrelId:
                        type: string
                mappings:
                  - message:
                      template: '{{$Setvariable2.variable}}'
                  - messageType:
                      template: TEXT
                  - mqmdHeader:
                      mappings:
                        - CorrelId:
                            template: '{{$base64encode($Request.quoteid, "utf8")}}'
                  - queueName:
                      template: '{{$Foreachitem}}request'
                $map: http://ibm.com/appconnect/map/v1
                input:
                  - variable: Setvariable
                    $ref: '#/node-output/Set variable/response/payload'
                  - variable: Setvariable2
                    $ref: '#/block/For each/node-output/Set variable 2/response/payload'
                  - variable: Foreachitem
                    $ref: '#/block/For each/current-item'
                  - variable: flowDetails
                    $ref: '#/flowDetails'
                  - variable: Request
                    $ref: '#/trigger/payload'
          - custom-action:
              action: GETMESSAGE
              name: IBM MQ Get message from a queue
              target:
                $ref: '#/integration/action-interfaces/action-interface-2'
              map:
                mappings:
                  - browseOnly:
                      template: 'No'
                  - correlId:
                      template: '{{$base64encode($Request.quoteid, "utf8")}}'
                  - queueName:
                      template: '{{$Foreachitem}}reply'
                $map: http://ibm.com/appconnect/map/v1
                input:
                  - variable: Setvariable
                    $ref: '#/node-output/Set variable/response/payload'
                  - variable: Setvariable2
                    $ref: '#/block/For each/node-output/Set variable 2/response/payload'
                  - variable: IBMMQPutmessageonaqueue
                    $ref: '#/block/For each/node-output/IBM MQ Put message on a queue/response/payload'
                  - variable: Foreachitem
                    $ref: '#/block/For each/current-item'
                  - variable: flowDetails
                    $ref: '#/flowDetails'
                  - variable: Request
                    $ref: '#/trigger/payload'
          - parse:
              parse-format: json
              source:
                template: '{{$IBMMQGetmessagefromaqueue.message}}'
                input:
                  - variable: Setvariable
                    $ref: '#/node-output/Set variable/response/payload'
                  - variable: Setvariable2
                    $ref: '#/block/For each/node-output/Set variable 2/response/payload'
                  - variable: IBMMQPutmessageonaqueue
                    $ref: '#/block/For each/node-output/IBM MQ Put message on a queue/response/payload'
                  - variable: IBMMQGetmessagefromaqueue
                    $ref: '#/block/For each/node-output/IBM MQ Get message from a queue/response/payload'
                  - variable: Foreachitem
                    $ref: '#/block/For each/current-item'
                  - variable: flowDetails
                    $ref: '#/flowDetails'
                  - variable: Request
                    $ref: '#/trigger/payload'
              sample-data: >-
                {"quoteid":"SampleQuoteid","quotedate":"1985-04-12T23:20:50.52Z","quoteamount":1,"comment":"SampleComment"}
              output-schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  quoteid:
                    type: string
                  quotedate:
                    type: string
                  quoteamount:
                    type: number
                  comment:
                    type: string
                title: Parsed JSON
              name: JSON Parser Parse
  name: dddapi
  description: Driveway Dent Deletion API Designer Flow.
models:
  repairquote:
    name: repairquote
    plural: repairquote
    properties:
      quoteid:
        required: false
        id: true
        type: string
      email:
        required: false
        id: false
        type: string
      licenseplate:
        required: false
        id: false
        type: string
      descriptionofdamage:
        required: false
        id: false
        type: string
      quotes:
        required: false
        id: false
        type:
          - type:
              quoteprovider:
                required: false
                id: false
                type: string
              quotecost:
                required: false
                id: false
                type: number
              quotedate:
                required: false
                id: false
                type: date
              comment:
                required: false
                id: false
                type: string
    operations:
      create: '#/integration/assemblies/assembly-1'
    description: ''
x-ibm-configuration:
  gateway: datapower-api-gateway
  type: rest
  phase: realized
  enforced: true
  testable: true
  cors:
    enabled: true
  assembly:
    execute:
      - invoke:
          title: Invoke flow
          version: 2.0.0
          verb: keep
          target-url: $(app-connect-designer-url)$(request.path)
          follow-redirects: false
          timeout: 60
          parameter-control:
            type: blocklist
          header-control:
            type: blocklist
          inject-proxy-headers: true
          username: $(app-connect-designer-username)
          password: $(app-connect-designer-password)
